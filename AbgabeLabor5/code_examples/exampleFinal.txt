; Startet immer am Anfang
    INPUT ; Wert einlesen
    NOP ; zum testen
    MOV B,A ; Wert nach Register B verschieben
    LOAD A, #4 ; Wert in A laden
    ADD A, B ; A und B addieren
    MOV B, A ; Ergebnis nach B verschieben
LOAD A, #konstant ; konstante laden
SUB A, B ; von Wert in A abziehen
AND A, B ; nur zum testen
OR A, B ; auch nur zum testen
loop: LOAD A, counter ; Zu wenig Register! Zähler im Speicher
OUTPUT ; Wir wollen was ausgeben
INC A ; Zahler erhöhen ...
STORE A, counter ; ... und sichern bevor er weg ist
BEQ end ; ggf. springen
JMP loop ; zum Schleifenanfang springen
reserved_byte: RESB 3 ; bytes reservieren um resb zu testen
end: HALT ; Fertig: Programm anhalten
counter: DB 0 ; definition und initialisierung vom counter
konstant: EQU 12 ; definition und initialisierung von der konstante